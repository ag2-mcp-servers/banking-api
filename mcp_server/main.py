# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:14:43+00:00



import argparse
import json
import os
from typing import *
from typing import Optional
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path, Query
from pydantic import conint

from models import (
    Account,
    AccountBalances,
    Accounts,
    Transaction,
    TransactionCategories,
    TransactionCategory,
    Transactions,
)

app = MCPProxy(
    contact={'email': 'support@codat.io', 'name': 'Codat'},
    description="Codat's Banking API allows you to access standardised data from over bank accounts via third party providers.\n\nStandardize how you connect to your customersâ€™ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.\n\n[Read more...](https://docs.codat.io/banking-api/overview)\n\n[See our OpenAPI spec](https://github.com/codatio/oas) ",
    summary="Codat's standardized API for accessing banking data.",
    termsOfService='https://www.codat.io/legals/',
    title='Banking API',
    version='2.1.0',
    servers=[{'description': 'Production', 'url': 'https://api.codat.io'}],
)


@app.get(
    '/companies/{companyId}/connections/{connectionId}/data/banking-accountBalances',
    description=""" Gets a list of balances for a bank account including end-of-day batch balance or running balances per transaction. """,
    tags=['account_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_account_balances(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
    page: conint(ge=0) = 1,
    page_size: Optional[conint(ge=1, le=5000)] = Query(100, alias='pageSize'),
    query: Optional[str] = None,
    order_by: Optional[str] = Query(None, alias='orderBy'),
):
    """
    List account balances
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/companies/{companyId}/connections/{connectionId}/data/banking-accounts',
    description=""" Gets a list of all bank accounts of the SMB, with rich data like balances, account numbers and institutions holdingthe accounts. """,
    tags=['account_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_accounts(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
    page: conint(ge=0) = 1,
    page_size: Optional[conint(ge=1, le=5000)] = Query(100, alias='pageSize'),
    query: Optional[str] = None,
    order_by: Optional[str] = Query(None, alias='orderBy'),
):
    """
    List accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/companies/{companyId}/connections/{connectionId}/data/banking-accounts/{accountId}',
    description=""" Gets a specified bank account for a given company """,
    tags=['account_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_account(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
    account_id: UUID = Path(..., alias='accountId'),
):
    """
    Get account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/companies/{companyId}/connections/{connectionId}/data/banking-transactionCategories',
    description=""" Gets a list of hierarchical categories associated with a transaction for greater contextual meaning to transactionactivity. """,
    tags=['transaction_category_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_transaction_categories(
    page: conint(ge=0) = 1,
    page_size: Optional[conint(ge=1, le=5000)] = Query(100, alias='pageSize'),
    query: Optional[str] = None,
    order_by: Optional[str] = Query(None, alias='orderBy'),
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
):
    """
    List all transaction categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/companies/{companyId}/connections/{connectionId}/data/banking-transactionCategories/{transactionCategoryId}',
    description=""" Gets a specified bank transaction category for a given company """,
    tags=['transaction_category_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transaction_category(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
    transaction_category_id: str = Path(..., alias='transactionCategoryId'),
):
    """
    Get transaction category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/companies/{companyId}/connections/{connectionId}/data/banking-transactions',
    description=""" Gets a list of transactions incurred by a bank account. """,
    tags=['transaction_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_transactions(
    page: conint(ge=0) = 1,
    page_size: Optional[conint(ge=1, le=5000)] = Query(100, alias='pageSize'),
    query: Optional[str] = None,
    order_by: Optional[str] = Query(None, alias='orderBy'),
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
):
    """
    List transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/companies/{companyId}/connections/{connectionId}/data/banking-transactions/{transactionId}',
    description=""" Gets a specified bank transaction for a given company """,
    tags=['transaction_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transaction(
    company_id: UUID = Path(..., alias='companyId'),
    transaction_id: str = Path(..., alias='transactionId'),
    connection_id: UUID = Path(..., alias='connectionId'),
):
    """
    Get bank transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/companies/{companyId}/data/banking-transactions',
    description=""" Gets a list of transactions incurred by a company across all bank accounts. """,
    tags=['transaction_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_bank_transactions(
    page: conint(ge=0) = 1,
    page_size: Optional[conint(ge=1, le=5000)] = Query(100, alias='pageSize'),
    query: Optional[str] = None,
    order_by: Optional[str] = Query(None, alias='orderBy'),
    company_id: UUID = Path(..., alias='companyId'),
):
    """
    List banking transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
