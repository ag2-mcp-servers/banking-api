# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:14:43+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class AccountType(Enum):
    Unknown = 'Unknown'
    Credit = 'Credit'
    Debit = 'Debit'


class DateTime(RootModel[str]):
    root: str = Field(
        ...,
        description='In Codat\'s data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:\n\n```\n2020-10-08T22:40:50Z\n2021-01-01T00:00:00\n```\n\n\n\nWhen syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:\n\n- Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`\n- Unqualified local time: `2021-11-15T01:00:00`\n- UTC time offsets: `2021-11-15T01:00:00-05:00`\n\n> Time zones\n> \n> Not all dates from Codat will contain information about time zones.  \n> Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.',
        examples=['2022-10-23T00:00:00Z'],
        title='Date time',
    )


class HRef(BaseModel):
    href: Optional[str] = None


class Links(BaseModel):
    current: HRef
    next: Optional[HRef] = None
    previous: Optional[HRef] = None
    self: HRef


class ModifiedDate(BaseModel):
    modifiedDate: Optional[DateTime] = Field(
        None, description='The date on which this record was last modified in Codat.'
    )


class PagingInfo(BaseModel):
    field_links: Links = Field(..., alias='_links')
    pageNumber: int
    pageSize: int
    totalResults: int


class SourceModifiedDate(BaseModel):
    sourceModifiedDate: Optional[DateTime] = Field(
        None,
        description='The date on which this record was last modified in the originating system',
    )


class AccountInstitution(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(
        None, description="The institution's ID, according to the provider."
    )
    name: Optional[str] = Field(
        None,
        description="The institution's name, according to the underlying provider.",
    )


class AccountBalanceAmounts(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    available: Optional[float] = Field(
        None,
        description="The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.",
    )
    current: Optional[float] = Field(
        None,
        description='The balance of the account only including cleared transactions.',
    )
    limit: Optional[float] = Field(
        None,
        description='The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.',
    )


class TransactionCode(Enum):
    Unknown = 'Unknown'
    Fee = 'Fee'
    Payment = 'Payment'
    Cash = 'Cash'
    Transfer = 'Transfer'
    Interest = 'Interest'
    Cashback = 'Cashback'
    Cheque = 'Cheque'
    DirectDebit = 'DirectDebit'
    Purchase = 'Purchase'
    StandingOrder = 'StandingOrder'
    Adjustment = 'Adjustment'
    Credit = 'Credit'
    Other = 'Other'
    NotSupported = 'NotSupported'


class TransactionCategoryRef(BaseModel):
    id: constr(min_length=1) = Field(
        ..., description='The unique category reference id for the bank transaction.'
    )
    name: Optional[str] = Field(
        None, description='The category name reference for the bank transaction.'
    )


class TransactionCategoryStatus(Enum):
    Unknown = 'Unknown'
    Active = 'Active'
    Archived = 'Archived'


class AccountIdentifierType(Enum):
    Account = 'Account'
    Card = 'Card'
    Credit = 'Credit'
    Depository = 'Depository'
    Investment = 'Investment'
    Loan = 'Loan'
    Other = 'Other'


class ModifiedDates(ModifiedDate, SourceModifiedDate):
    pass


class Transaction(ModifiedDates):
    accountId: constr(min_length=1) = Field(
        ..., description='The unique identifier of the bank account.'
    )
    amount: Optional[float] = Field(
        None, description='The amount of the bank transaction.'
    )
    authorizedDate: Optional[DateTime] = Field(
        None, description='The date the bank transaction was authorized.'
    )
    code: Optional[TransactionCode] = None
    currency: constr(min_length=1) = Field(
        ..., description='The currency of the bank transaction.'
    )
    description: Optional[str] = Field(
        None, description='The description of the bank transaction.'
    )
    id: constr(min_length=1) = Field(
        ..., description='The unique identifier of the bank transaction.'
    )
    merchantName: Optional[str] = Field(None, description='The name of the merchant.')
    postedDate: Optional[DateTime] = Field(
        None, description='The date the bank transaction was cleared.'
    )
    transactionCategoryRef: Optional[TransactionCategoryRef] = None


class TransactionCategory(ModifiedDates):
    hasChildren: Optional[bool] = Field(
        None,
        description='A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.',
    )
    id: constr(min_length=1) = Field(
        ..., description='The unique identifier of the bank transaction category.'
    )
    name: constr(min_length=1) = Field(
        ..., description='The name of the bank transaction category.'
    )
    parentId: Optional[str] = Field(
        None,
        description='The unique identifier of the parent bank transaction category.',
    )
    status: Optional[TransactionCategoryStatus] = None


class Transactions(PagingInfo):
    results: Optional[List[Transaction]] = None


class AccountIdentifiers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bankCode: Optional[str] = Field(
        None,
        description='The local (usually national) routing number for the account.\n\nThis is known by different names in different countries:\n* BSB code (Australia)\n* routing number (Canada, USA)\n* sort code (UK)',
    )
    bic: Optional[str] = Field(
        None,
        description='The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.',
    )
    iban: Optional[str] = Field(
        None,
        description='The international bank account number (IBAN) for the account, if known.',
    )
    maskedAccountNumber: Optional[str] = Field(
        None,
        description='A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)',
    )
    number: Optional[str] = Field(
        None,
        description='The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.',
    )
    subtype: Optional[str] = Field(None, description='Detailed account category')
    type: AccountIdentifierType


class Account(ModifiedDates):
    balance: AccountBalanceAmounts = Field(
        ..., description='An object containing bank balance data.'
    )
    currency: constr(min_length=1) = Field(
        ..., description='The currency code for the account.'
    )
    holder: Optional[str] = Field(
        None, description='The name of the person or company who holds the account.'
    )
    id: constr(min_length=1) = Field(
        ..., description='The ID of the account from the provider.'
    )
    identifiers: AccountIdentifiers
    informalName: Optional[str] = Field(
        None,
        description='The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.',
    )
    institution: AccountInstitution
    name: constr(min_length=1) = Field(
        ..., description='The name of the account according to the provider.'
    )
    type: AccountType


class AccountBalance(ModifiedDates):
    accountId: constr(min_length=1) = Field(
        ..., description='The unique identifier of the account.'
    )
    balance: AccountBalanceAmounts
    date: DateTime = Field(..., description='Date of the balance.')


class AccountBalances(PagingInfo):
    results: Optional[List[AccountBalance]] = None


class Accounts(PagingInfo):
    results: Optional[List[Account]] = None


class TransactionCategories(PagingInfo):
    results: Optional[List[TransactionCategory]] = None
